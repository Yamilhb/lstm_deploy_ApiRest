# Tox is a generic virtualenv management and test command line tool. Its goal is to
# standardize testing in Python.

# Using Tox we can (on multiple operating systems):
# + Eliminate PYTHONPATH challenges when running scripts/tests
# + Eliminate virtualenv setup confusion
# + Streamline steps such as model training, model publishing

# [---]: Are tox environment. Used to set up a virtual environment.

[tox] # General configurations.
min_version = 4 # Tox minimun version to execute the file.
envlist = test_package, checks # Virtual environments that are goint to be created.
skipsdist = True # Avoid create distribution files (.tar.gz, .whl, etc).

[testenv] # To define each virtual env configuration of the 'envlist'.
basepython = /home/y41000/miniconda3/envs/tensorfl/bin/python # Python version of the virtual environment.
install_command = pip install {opts} {packages} # To define the comand that will be used to install the packages (pip install).
allowlist_externals = train # Allow the use of the `train` command as external tool that can be executed inside the environment.

setenv = # To define environment vars that will be created when the viertual env borns
	PYTHONPATH=. # ´PYTHONPATH´ is set into the current directory. It allow's the import of local modules.
	PYTHONHASHSEED=0 # WTF this means, is a mistery: "se establece en 0 para evitar inconsistencias en la generación de hash aleatorios en diferentes entornos."

[testenv:test_package] # To define the virtual env, "test_package" configuration, specified in `envlist`.
envdir = {toxworkdir}/test_package # Directories where them will be created. {toxworkdir} -> A temporal directory created by tox. "test_package" -> Name of the virtual env.
deps =
	-r{toxinidir}/requirements/test_requirements.txt # Specify the packages tha have to be installed.
commands= # Commands that will execute:
	python regression_model/pipeline.py #  First, the pipeline.
	pytest \
	-s \
	-vv \
	{posargs:tests/} # Then, the unit test defined in "test/" directory using pytest library.

[testenv:train]
envdir = {toxworkdir}/test_package
deps =
     {[testenv:test_package]deps}
commands=
	python regression_model/train_pipeline.py


[testenv:checks]
envdir = {toxworkdir}/checks
deps =
	-r{toxinidir}/requirements/typing_requirements.txt
commands =
	flake8 regression_model tests
	isort regression_model tests
	{posargs:mypy regression_model}


[flake8]
exclude = .git,env # File that we do not want to check.
max-line-length = 100 # Maximun number of characters per line (by default 79).
